// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ratelimiter

import (
	"sync"
	"time"
)

// Ensure, that tickerMock does implement ticker.
// If this is not the case, regenerate this file with moq.
var _ ticker = &tickerMock{}

// tickerMock is a mock implementation of ticker.
//
// 	func TestSomethingThatUsesticker(t *testing.T) {
//
// 		// make and configure a mocked ticker
// 		mockedticker := &tickerMock{
// 			InitFunc: func() <-chan time.Time {
// 				panic("mock out the Init method")
// 			},
// 		}
//
// 		// use mockedticker in code that requires ticker
// 		// and then make assertions.
//
// 	}
type tickerMock struct {
	// InitFunc mocks the Init method.
	InitFunc func() <-chan time.Time

	// calls tracks calls to the methods.
	calls struct {
		// Init holds details about calls to the Init method.
		Init []struct {
		}
	}
	lockInit sync.RWMutex
}

// Init calls InitFunc.
func (mock *tickerMock) Init() <-chan time.Time {
	if mock.InitFunc == nil {
		panic("tickerMock.InitFunc: method is nil but ticker.Init was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	mock.lockInit.Unlock()
	return mock.InitFunc()
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//     len(mockedticker.InitCalls())
func (mock *tickerMock) InitCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInit.RLock()
	calls = mock.calls.Init
	mock.lockInit.RUnlock()
	return calls
}
